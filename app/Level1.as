package app {		import flash.display.MovieClip;	public class Level1 extends MovieClip{				//Level1 constants		private const cardHorizontalSpacing:Number = 95;		private const cardVerticalSpacing:Number = 95;		private const boardL1OffsetX:Number = 10;		private const boardL1OffsetY:Number = 10;		private const phenomena: Array = new Array("Day", "People", "Season", "IChing");		private const IChingPhrases: Array = new Array("00", "01", "10", "11");				//Level variables		public var boardL1:MovieClip = new MovieClip();		public var openedCards:Array = new Array();		public var level1Counter:uint = 0;				//var referee:Referee = new Referee();		public function Level1(){			// constructor code		setup();		(boardL1) ? trace("Level1 constructor: boardL1 not null") : trace("Level1 constructor: boardL1 null");				}				public function setup():void{						//setup 2 play boards, one for cards on-play, one for cards are done.			boardL1.x = boardL1OffsetX;			boardL1.y = boardL1OffsetY;			boardL1.name ="board_L1";			addChild(boardL1);									//set up a list of all card			var cardList:Array = new Array();			for(var i:uint = 0; i < phenomena.length*IChingPhrases.length; i++) {				cardList.push(i);			}						//create all cards, position them, and assign a randomcard face to each			for(var xCordinate:uint = 0; xCordinate< phenomena.length; xCordinate++) {				for (var yCordinate:uint = 0; yCordinate<IChingPhrases.length; yCordinate++) {					var c:Card = new Card();					faceDown(c);//show cover					c.x = xCordinate*cardHorizontalSpacing;					c.y = yCordinate*cardVerticalSpacing;					var r:uint = Math.floor(Math.random()*cardList.length); //get a random face					c.cardFace = cardList[r]; //assign face to each card					trace(c.cardFace);					c.addEventListener(MouseEvent.CLICK, clickCard); // have cards listen for mouse clicks					c.buttonMode = true;								cardList.splice(r,1);// remove face from list					//c.gotoAndStop(c.cardFace+2);					boardL1.addChild(c);//show the card									}			}												}	}	}																	//player cliked on a card		public function clickCard(event:MouseEvent) {				var thisCard:Card = (event.currentTarget as Card); //what card?				(thisCard.faceUp) ? faceDown(thisCard) : faceUp(thisCard); //Switch card on and off																		if(openedCards.length == 4) {														openedCards.sort(Array.NUMERIC);								if (areOpenedCardsSameKind()) {								openedCards.length = 0;								offGameOpenedCards();															}else {								showMessage("Sorry, those 4 cards are not of the same kind.\nTry again!");									}														} else if (openedCards.length > 4) {							if(thisCard.faceUp) {faceDown(thisCard);} //only opened cards can be clicked							}																		//Check if game is completed						if (level1Counter == 16 ) {							showMessage("Congrats!\nYou've completed\nLevel 1");						}																		}				/* HAS A BUG either on showMessage() or dismissMessage()! :( background alpha is unexpectedly accummulated */	public function showMessage(msg: String): void {			var msgDisplay:Sprite = new Sprite();			var bg:Shape = drawBackground();			var txt:TextField = new TextField();			txt.width = 545 - (cardVerticalSpacing*phenomena.length + boardL1OffsetY*2);			txt.height = 400 - (cardVerticalSpacing*IChingPhrases.length - boardL1OffsetY) ;			txt.x = cardVerticalSpacing*phenomena.length + boardL1OffsetX+15;//align txt field to the right			txt.y = 300;			txt.autoSize = TextFieldAutoSize.CENTER;			txt.multiline = true;             txt.wordWrap = true; 			txt.styleSheet = css.style;			txt.htmlText = "<msg>" + msg + "</msg>";						msgDisplay.addChild(bg);			msgDisplay.addChild(txt);			msgDisplay.setChildIndex(txt, msgDisplay.numChildren-1);			msgDisplay.addEventListener(MouseEvent.CLICK, dismissMessage);			addChild(msgDisplay);		}					public function dismissMessage(event:MouseEvent):void {			faceDownOpenedCards();			var msgDisplay:Sprite = event.currentTarget as Sprite;				removeChild(msgDisplay);			msgDisplay.removeEventListener(MouseEvent.CLICK, dismissMessage);		}			public function drawBackground():Shape {			var bg:Shape = new Shape; // initializing the variable named rectangle			bg.graphics.clear();			bg.graphics.beginFill(0x000000); // choosing the colour for the fill, here it is red			bg.graphics.drawRect(0,0,550,400); // (x spacing, y spacing, width, height)			bg.graphics.endFill();			bg.x = bg.y = 0;			bg.alpha = .7;			return bg;		}						private function faceUp(c:Card):void {			c.gotoAndStop(c.cardFace+2);			c.faceUp = true;			openedCards.push(c.cardFace);//put the clicked card into openedCard array		}				private function faceDown(c:Card):void {			c.gotoAndStop(1);			c.faceUp = false;			for (var i:uint = 0; i < openedCards.length; i++) {				if(openedCards[i] == c.cardFace){				   openedCards.splice(i, 1);				   break;				}			}		}				function areOpenedCardsSameKind():Boolean {			if ( (openedCards[0] == 0 && openedCards[3] == 3) ||				 (openedCards[0] == 4 && openedCards[3] == 7) ||				 (openedCards[0] == 8 && openedCards[3] == 11) ||				 (openedCards[0] == 12 && openedCards[3] == 15) ){				return true;			} else {				return false;			}					}				function faceDownOpenedCards():void {			for (var i:uint; i < boardL1.numChildren; i++) {				var card:Card = boardL1.getChildAt(i) as Card;				if (card.faceUp) {					faceDown(card);				}			}		}				function offGameOpenedCards():void {			for (var i:uint; i < boardL1.numChildren; i++) {				var card:Card = boardL1.getChildAt(i) as Card;				if (card.faceUp && card.alpha == 1) {								level1Counter += 1;					card.alpha = 0.1;					card.removeEventListener(MouseEvent.CLICK, clickCard);					card.buttonMode = false;				}			}		}		